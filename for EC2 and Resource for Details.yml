Parameters:
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  KeyPairName:
    Description: >-
      Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the
      instances.
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: KeyPairName is a required Field and can contain only ASCII characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: >-
      /aws/service/canonical/ubuntu/server/18.04/stable/current/amd64/hvm/ebs-gp2/ami-id
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Metadata:
        AWS::CloudFormation::Init:
          configSets:
            full_install:
            - install_and_enable_cfn_hup
          install_and_enable_cfn_hup:
            files:
              "/etc/cfn/cfn-hup.conf":
                content:
                  Fn::Join:
                  - ''
                  - - "[main]\n"
                    - stack=
                    - Ref: AWS::StackId
                    - "\n"
                    - region=
                    - Ref: AWS::Region
                    - "\n"
                mode: '000400'
                owner: root
                group: root
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                content:
                  Fn::Join:
                  - ''
                  - - "[cfn-auto-reloader-hook]\n"
                    - 'triggers=post.update
                      '
                    - 'path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                      '
                    - 'action=/opt/aws/bin/cfn-init -v '
                    - "         --stack "
                    - Ref: AWS::StackName
                    - "         --resource EC2Instance "
                    - "         --configsets full_install "
                    - "         --region "
                    - Ref: AWS::Region
                    - "\n"
                    - 'runas=root
                      '
              "/lib/systemd/system/cfn-hup.service":
                content:
                  Fn::Join:
                  - ''
                  - - "[Unit]\n"
                    - "Description=cfn-hup daemon\n\n"
                    - "[Service]\n"
                    - 'Type=simple
                      '
                    - 'ExecStart=/opt/aws/bin/cfn-hup
                      '
                    - "Restart=always\n\n"
                    - "[Install]\n"
                    - WantedBy=multi-user.target
            commands:
              01enable_cfn_hup:
                command: systemctl enable cfn-hup.service
              02start_cfn_hup:
                command: systemctl start cfn-hup.service
      UserData:
        Fn::Base64: |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install ruby-full -y
            sudo apt-get install wget -y
            cd /home/ubuntu
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status
            sudo apt-get update -y
            sudo apt-get install ruby-full -y
            sudo apt-get install wget -y
            cd /home/ubuntu
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status
            sudo apt-get install awscli

      IamInstanceProfile:
        !Ref RootInstanceProfile
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d4329778-2e16-4911-9ce3-f7aa9cc40d0b
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2bf73695-097d-499b-b396-db029bed2cf8
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e1db1c3c-792b-4cbd-bcbe-bf8e31b86cc4
  CodeDeployTrustRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
                - codedeploy.us-west-2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodeDeployRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'ec2:Describe*'
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'autoscaling:CompleteLifecycleAction'
              - 'autoscaling:DeleteLifecycleHook'
              - 'autoscaling:DescribeLifecycleHooks'
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:PutLifecycleHook'
              - 'autoscaling:RecordLifecycleActionHeartbeat'
      Roles:
        - !Ref CodeDeployTrustRole
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  InstanceRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:*'
              - 'codedeploy:*'
              - 'autoscaling:Describe*'
              - 'cloudformation:Describe*'
              - 'cloudformation:GetTemplate'
              - 's3:Get*'
            Resource: '*'
      Roles:
        - !Ref InstanceRole
  InstanceRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - "s3:ListAllMyBuckets"
            - "s3:GetObjects"
            - "s3:ListBucket"
          Resource: 
            - "arn:aws:s3:::reactsearch-scripts"
            - "arn:aws:s3:::reactsearch-scripts/*"
      Roles:
      - !Ref RootRole
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RootRole
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicIp
Metadata:
  'AWS::CloudFormation::Designer':
    e1db1c3c-792b-4cbd-bcbe-bf8e31b86cc4:
      size:
        width: 60
        height: 60
      position:
        x: 250
        'y': 90
      z: 1
      embeds: []
    2bf73695-097d-499b-b396-db029bed2cf8:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
    d4329778-2e16-4911-9ce3-f7aa9cc40d0b:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - 2bf73695-097d-499b-b396-db029bed2cf8
